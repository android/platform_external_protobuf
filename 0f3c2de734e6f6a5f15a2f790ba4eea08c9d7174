{
  "comments": [
    {
      "key": {
        "uuid": "b9123c0c_6b687c6f",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNano.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1020814
      },
      "writtenOn": "2014-07-22T06:40:24Z",
      "side": 1,
      "message": "This is true in the case of vanilla flavor but not the hazzer flavor, right?",
      "revId": "0f3c2de734e6f6a5f15a2f790ba4eea08c9d7174",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "195ee8cf_3a5f29cc",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNano.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1022968
      },
      "writtenOn": "2014-07-22T10:43:05Z",
      "side": 1,
      "message": "by hazzer flavor do you mean the \u0027hasX\u0027 fields, or the accessors?\n\nbut I would say, regardless of the flavor, \"field values\" (when \"field\" means proto field) could be considered the same even if the Java representations differ. I.e.\n\n  optional int32 x \u003d ... [default\u003d0];\n  a.x\u003d1, a.hasX\u003dfalse, b.x\u003d1, b.hasX\u003dtrue\n    \"field value\" of x is \"set to 1\", for both a and b.\n  a.x\u003d0, a.hasX\u003dtrue, b.x\u003d0, b.hasX\u003dfalse\n    \"field value\" of a.x is \"set to 0\" and for b.x is \"unset\".\n\nIIRC, the \u0027hasX\u0027 field is relevant only if x \u003d\u003d default.",
      "parentUuid": "b9123c0c_6b687c6f",
      "revId": "0f3c2de734e6f6a5f15a2f790ba4eea08c9d7174",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79e44451_0d1114b9",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNano.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1020814
      },
      "writtenOn": "2014-07-22T17:15:57Z",
      "side": 1,
      "message": "But in this equals implementation, these two would be unequal. Is that ok?",
      "parentUuid": "195ee8cf_3a5f29cc",
      "revId": "0f3c2de734e6f6a5f15a2f790ba4eea08c9d7174",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f95af4db_df1123bd",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNano.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1022968
      },
      "writtenOn": "2014-07-22T17:24:33Z",
      "side": 1,
      "message": "void PrimitiveFieldGenerator::\nGenerateEqualsCode(io::Printer* printer) const {\n  // We define equality as serialized form equality. If generate_has(),\n  // then if the field value equals the default value in both messages,\n  // but one\u0027s \u0027has\u0027 field is set and the other\u0027s is not, the serialized\n  // forms are different and we should return false.\n\nso I don\u0027t think there\u0027s any problem here.",
      "parentUuid": "79e44451_0d1114b9",
      "revId": "0f3c2de734e6f6a5f15a2f790ba4eea08c9d7174",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}