{
  "comments": [
    {
      "key": {
        "uuid": "6839c300_23e2b447",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNanoPrinter.java",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1022968
      },
      "writtenOn": "2013-12-12T17:49:04Z",
      "side": 1,
      "message": "I mean, in here, there\u0027s no logic to skip printing if the appropriate \"has\" representation evaluates to false (e.g. (hasX \u003d\u003d false) if generate_has, or (x \u003d\u003d xDefault) if not), so even if this field would not be serialized, it would still be printed to the string output.\n\nSo you could just ignore the hasX() accessor.",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "6b594c228e7954eb98353ad8e242b83fb255a277",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08abe757_0b34e10e",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNanoPrinter.java",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1021924
      },
      "writtenOn": "2013-12-12T17:59:23Z",
      "side": 1,
      "message": "Oh I understand now (although I am going to ignore the generate_has option since it\u0027s deprecated). It\u0027s a fair point, although that seems to be a shortcoming of public mutable fields that should be fixed. Won\u0027t happen in this change, but I\u0027d rather keep the more nuanced printing for accessors",
      "parentUuid": "6839c300_23e2b447",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "6b594c228e7954eb98353ad8e242b83fb255a277",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68d543ff_a076da64",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNanoPrinter.java",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1022968
      },
      "writtenOn": "2013-12-13T12:17:30Z",
      "side": 1,
      "message": "agreed, but I would probably prefer erring on the safe side, so if you can\u0027t find the hazzer, don\u0027t assume !has.",
      "parentUuid": "08abe757_0b34e10e",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "6b594c228e7954eb98353ad8e242b83fb255a277",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8cbbb64_426fd288",
        "filename": "java/src/main/java/com/google/protobuf/nano/MessageNanoPrinter.java",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1021924
      },
      "writtenOn": "2013-12-13T15:15:57Z",
      "side": 1,
      "message": "I think we do need to assume !has if we can\u0027t find the hazzer, although it seems the odds of finding the getter, but not the hazzer are very slim.\n\nI think in the world of stripped/in-lined methods, this printer becomes best-effort at best",
      "parentUuid": "68d543ff_a076da64",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "6b594c228e7954eb98353ad8e242b83fb255a277",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}